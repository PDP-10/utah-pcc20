So what do you do when your pcc program blows up and you're tired
of staring at the code?

0. If you have MIC try the trace*.mic procedures on pcc:

1. Learn how to use DDT. (see below)

2. Look at $fp = register octal 16 = the frame pointer.  It points to
   a word holding the start address+1 of the routine you are now in. 
   The word immediately preceding that one holds the return addr; i.e.
   it will contain the name of the caller + some offset.  (The words
   preceding that hold the arguments to the current routine, going
   backwards, i.e. parm1 = -2(fp), parm2 = -3(fp), etc.)
   Go forward in the stack 5 words (from the frame pointer) and you
   reach the last saved frame pointer.

   NB: Things may be a little weird if we're in the 'jsys' function
   (usually from putc or getc), cause it doesn't save everything. 

3. Iterate step 2 to get a calling trace.  Obviously a program should
   do this.  Write it! 

4. You could undelete the macro file on scratch: to look at the code
   with C source line-numbers.



	       AN INTRODUCTION TO DDT FOR THE COMPLEAT IDIOT
		     (sufficient to do only the above)

1. Type "DDT<cr>".

2. Type "16/".  Hit TAB (ctrl-I).

3. You're looking at the name of the routine you were in at the time.
   Hit BACKSPACE (ctrl-H).  You're looking at the return address in
   the caller.  (If you hit BACKSPACE again, you will be looking at
   the first argument to the current routine.  Type "=" to see it in
   octal.  Everytime you backspace you'll see another arg.)
   Hit LINEFEED (ctrl-J) the same number of times you backspaced to
   get back to the name of the current routine.  Hit LINEFEED 5 times.
   Hit TAB.  You're back at the beginning of this step, looking at
   the name of the caller, etc, etc.

4. Keep doing the above till you reach MAIN or get lost.



STACK LAYOUT:

Misc:	It begins at the contents of .JBFF rounded up to a page boundary.

	There are a max of 4 register variables: the first goes in reg. 15
	(octal), second in 14, etc. Register 1 is the return value register.



		---------------------------------
Current P (17)-->				 == Top word on stack
		  Compiler temporaries

		---------------------------------

		  Automatic variables

		---------------------------------
		  Old Frame Pointer (16)	--------i
		---------------------------------	|
		  Caller's reg variable #1 (15)		|
		---------------------------------	|
		  Caller's reg variable #2 (14)		|
		---------------------------------	|
		  Caller's reg variable #3 (13)		|
		---------------------------------	|
		  Caller's reg variable #4 (12)		|
		---------------------------------	|
Current FP--->>	  Entry address + 1			|
		---------------------------------	|
		  Return address			|
		---------------------------------	|
		  Argument 1				|
		---------------------------------	|
		  Argument 2				|
		---------------------------------	|
		   . . . .				|
		---------------------------------	|
		  Argument n				|
		---------------------------------	|
							|
		  Caller's Temporaries			|
							|
		---------------------------------	|
							|
		  Caller's Locals			|
							|
		---------------------------------	|
		  Grandfather's frame pointer	 -------+-------i
		---------------------------------	|	|
		  Grandfather's reg var #1		|	|
		---------------------------------	|	|
					#2		|	V etc.
		---------------------------------	|
					#3		|
		---------------------------------	|
					#4		|
		---------------------------------	|
		  Grandfather's entry address +1 <<-----| 
		--------------------------------- 
			ETCETERA
